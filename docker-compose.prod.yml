# Production Docker Compose Override
# Use with: docker-compose -f docker-compose.yml -f docker-compose.prod.yml up

services:
  # Rails application container for production
  web:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - RAILS_ENV=production
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
      - ELASTICSEARCH_URL=http://elasticsearch:9200
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      elasticsearch:
        condition: service_healthy
    volumes:
      - ./storage:/rails/storage
      - ./log:/rails/log
    restart: unless-stopped
    env_file:
      - .env
    command: >
      bash -c "
        bundle exec rails db:prepare &&
        bundle exec rails assets:precompile &&
        bundle exec rails server -b 0.0.0.0 -p 3000"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Background job processor
  sidekiq:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - RAILS_ENV=production
      - POSTGRES_HOST=postgres
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./storage:/rails/storage
      - ./log:/rails/log
    restart: unless-stopped
    env_file:
      - .env
    command: bundle exec sidekiq
    healthcheck:
      test: ["CMD-SHELL", "bundle exec sidekiqctl status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./public:/var/www/public:ro
      - ./storage:/var/www/storage:ro
    depends_on:
      - web
    restart: unless-stopped

  # Override PostgreSQL for production optimizations
  postgres:
    environment:
      POSTGRES_DB: pirate_on_rails_production
      POSTGRES_USER: pirate_user
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    command: >
      postgres 
      -c shared_preload_libraries=pg_stat_statements
      -c pg_stat_statements.track=all
      -c max_connections=300
      -c shared_buffers=512MB
      -c effective_cache_size=2GB
      -c maintenance_work_mem=128MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=32MB
      -c default_statistics_target=100
      -c random_page_cost=1.1
      -c effective_io_concurrency=200
      -c work_mem=4MB
      -c huge_pages=try
      -c max_wal_size=2GB
      -c min_wal_size=1GB

  # Override Redis for production
  redis:
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 512mb
      --maxmemory-policy allkeys-lru
      --tcp-keepalive 60
      --timeout 300
      --save 900 1
      --save 300 10
      --save 60 10000

  # Override Elasticsearch for production
  elasticsearch:
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - ES_JAVA_OPTS=-Xms1g -Xmx1g
      - bootstrap.memory_lock=true
      - cluster.routing.allocation.disk.threshold_enabled=false

  # Python AI Microservice production config
  python-ai:
    environment:
      - SERIES_DATA_URL=http://web:3000/chats/series_data
      - RAILS_HISTORY_URL=http://web:3000/chats/history
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
    volumes:
      - ai_models:/app/models
      - ai_data:/app/data
      - ./ai_logs:/app/logs  # Production logging
    restart: unless-stopped
